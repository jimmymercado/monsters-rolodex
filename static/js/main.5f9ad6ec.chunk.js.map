{"version":3,"sources":["components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CardList","props","className","monsters","map","monster","SearchBox","placeholder","onSearchChange","type","onChange","App","handleChange","e","setState","searchField","target","value","state","message","name","id","fetch","then","res","json","users","this","filteredMonsters","filter","toLocaleLowerCase","includes","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"2UAKaA,G,YAAW,SAACC,GACrB,OACI,yBAAKC,UAAU,aACVD,EAAME,SAASC,KAAI,SAAAC,UCLnBC,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,eAAf,OACrB,2BACIN,UAAU,SACVO,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCqEHG,G,wDApEb,aAAc,IAAD,8BACX,gBAqBFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SArBpC,EAAKC,MAAQ,CACXC,QAAQ,gBACRhB,SAAU,CACR,CAACiB,KAAM,eAAgBC,GAAG,KAC1B,CAACD,KAAM,UAAWC,GAAG,KACrB,CAACD,KAAM,SAAUC,GAAG,MAEtBN,YAAa,IATJ,E,gEAeO,IAAD,OACjBO,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACX,SAASuB,S,+BAShC,IAAD,SAC2BC,KAAKT,MAA/Bf,EADD,EACCA,SAAUY,EADX,EACWA,YACXa,EAAmBzB,EAAS0B,QAAO,SAAAxB,GAAO,OAC9CA,EAAQe,KAAKU,oBAAoBC,SAAShB,EAAYe,wBAIxD,OACE,yBAAK5B,UAAU,OACb,+CACA,kBAAC,EAAD,CAAWK,YAAY,kBAAkBC,eAAgBmB,KAAKf,eAC9D,4BAAQoB,QAAS,kBAAM,EAAKlB,SAAS,CAACK,QAAS,EAAKD,MAAMC,QAAU,gBAApE,YAEA,kBAAC,EAAD,CAAUhB,SAAUyB,S,GAzCVK,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM/B,c","file":"static/js/main.5f9ad6ec.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport {Card} from '../card/card.component';\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = (props) => {\r\n    return(\r\n        <div className='card-list'>\r\n            {props.monsters.map(monster => (\r\n               //h1 key={monster.id}>{monster.name}</h1> \r\n               <Card key={monster.id} monster={monster} />\r\n            ))}    \r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({placeholder, onSearchChange}) => (\r\n    <input\r\n        className='search' \r\n        type='search' \r\n        placeholder={placeholder}\r\n        onChange={onSearchChange}\r\n        /*\r\n        onChange={e => \r\n          this.setState({searchField: e.target.value}, () => {\r\n            console.log(this.state.searchField)\r\n          })\r\n        } \r\n        */\r\n\r\n    />\r\n);\r\n","import React, {Component} from 'react';\n\n\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\nimport './App.css';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      message:'Hello Popsie!',\n      monsters: [\n        {name: 'Frankenstein', id:100},\n        {name: 'Dracula', id:101},\n        {name: 'Zombie', id:102}\n      ],\n      searchField: ''\n    };\n\n  \n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => this.setState({monsters:users})) //overwrite monsters\n\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField:e.target.value});\n\n  }\n\n  render(){\n    const {monsters, searchField} =  this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\n      );\n\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox placeholder='search monsters' onSearchChange={this.handleChange} />\n        <button onClick={() => this.setState({message: this.state.message + ' MABUHAY!'})}>Click Me</button>\n          \n        <CardList monsters={filteredMonsters}/>\n    </div>\n    );\n  }\n}\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}